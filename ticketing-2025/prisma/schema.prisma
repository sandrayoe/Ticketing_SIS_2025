// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentStatus {
  pending
  confirmed
  rejected
}

enum TicketStatus {
  not_issued
  issued
  used
}

enum MemberType {
  single
  student
  family
  pensioner
}

enum ReviewStatus { 
  ok 
  needs_member 
  needs_ocr 
  recheck 
}

model Member {
  id         String     @id @default(cuid())
  name_key   String     @unique       
  type       MemberType
}


model Registration {
  review_status    ReviewStatus  @default(ok)
  review_reason    String?
  member_type_detected MemberType?
  member_checked_at    DateTime?
  ocr_amount_detected  Int?
  ocr_checked_at       DateTime?
  id               String        @id @default(cuid())
  name             String
  email            String
  tickets_regular  Int           @default(0)
  tickets_children Int           @default(0)
  tickets_member   Int           @default(0)
  total_amount     Int           //store in SEK
  proof_url        String
  invoice_sent     Boolean       @default(false)
  payment_status   PaymentStatus @default(pending)
  ticket_status    TicketStatus  @default(not_issued)
  createdAt       DateTime      @default(now())

  // relation to Ticket rows
  tickets          Ticket[]

  @@index([payment_status])
  @@index([createdAt])
  @@index([review_status])
}

model Ticket {
  id             String       @id @default(cuid())
  registrationId String
  type           String                     // 'regular' | 'member' | 'children'
  ticketNo       String       @unique      // for human code in QR/email
  qrUrl          String
  status         TicketStatus @default(issued)
  createdAt      DateTime     @default(now())

  registration   Registration @relation(fields: [registrationId], references: [id])

  @@index([registrationId])
  @@index([status])
}
